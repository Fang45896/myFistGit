git --version
git config --global user.name "<Your Name>"
git config --global user.email "<your@gmail.com>"
git config --list
git config --global core.editor "'編輯器path' -multiInst -nosession"
git help config

repository 檔案庫

 // 建立一個 hello-git 資料夾
 $ mkdir hello-git
 // 移動到 hello-git 資料夾
 $ cd hello-git
 // 將專案資料夾建立成 git repository
 $ git init
 // 列出專案資料夾下的檔案和資料夾（-l 參數為列出詳細資料，-a 為列出隱藏資料夾）
 $ ls -la(dir)

git status

git add XXX(加入追蹤) > git commit -m "更新檔案說明"

 // 檔案尚未加入過追蹤時使用，即可恢復到檔案尚未加入暫存區
 $ git rm --cached hello.py

 // 若檔案已經在 repository 內，則使用以下指令
 // repository 與 stage 的檔案都會被還原到 HEAD，但 working directory 內的檔案不變
 $ git reset HARD

若有檔案修改，記得要再 add 修改的檔案（這是新手比較容易忘記的部分），若是要放棄修改可以使用 git checkout -- 檔案名稱

 // 比較現在檔案和上次 commit 之間的差異，也就是說你做了哪些修改
 $ git diff
 // 查看目前工作狀態
 $ git status
 Changes not staged for commit:
 (use "git add <file>..." to update what will be committed)
 (use "git checkout -- <file>..." to discard changes in working directory)

     modified:   hello.py

commit 這個修改時簡寫會寫成這樣（-a 是 add，-m 為 message 簡寫，後面接訊息資訊）：

 $ git commit -a -m "修改了 hello.py"

git push -u origin master

---------------------------------------------------------
git config --global alias.XX commit 將commit指令(可以換成其他指令)以XX代替

git clone URL 將線上的git複製至本機
git branch -a 查詢包含線上的分支內容
git branch XXX remotes/origin/XXX 對應遠端分支
git remote -v 觀看遠程分支具體設置
git push origin dev 將本地庫檔案推上遠端庫
(github要設定token)

echo "# mygit" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main 主分支命名為 main
git remote add origin https://github.com/Fang45896/mygit.git
git push -u origin main